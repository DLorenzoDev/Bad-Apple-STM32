
Bad_Apple_Proyect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039ec  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b84  08003b84  00004b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b9c  08003b9c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b9c  08003b9c  00004b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ba4  08003ba4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00004ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003bac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  2000000c  08003bb8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  08003bb8  00005928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e47e  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201a  00000000  00000000  000134ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  000154d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c05  00000000  00000000  00016428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bb0  00000000  00000000  0001702d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011666  00000000  00000000  0002dbdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009050d  00000000  00000000  0003f243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf750  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a4  00000000  00000000  000cf794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d3938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003b6c 	.word	0x08003b6c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003b6c 	.word	0x08003b6c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <FLASH_CS_LOW>:

extern SPI_HandleTypeDef hspi1;
#define FLASH_CS_PIN GPIO_PIN_4
#define FLASH_CS_PORT GPIOA

static void FLASH_CS_LOW() { HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_RESET); }
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
 8000508:	2200      	movs	r2, #0
 800050a:	2110      	movs	r1, #16
 800050c:	4802      	ldr	r0, [pc, #8]	@ (8000518 <FLASH_CS_LOW+0x14>)
 800050e:	f001 f891 	bl	8001634 <HAL_GPIO_WritePin>
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40020000 	.word	0x40020000

0800051c <FLASH_CS_HIGH>:
static void FLASH_CS_HIGH(){ HAL_GPIO_WritePin(FLASH_CS_PORT, FLASH_CS_PIN, GPIO_PIN_SET); }
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
 8000520:	2201      	movs	r2, #1
 8000522:	2110      	movs	r1, #16
 8000524:	4802      	ldr	r0, [pc, #8]	@ (8000530 <FLASH_CS_HIGH+0x14>)
 8000526:	f001 f885 	bl	8001634 <HAL_GPIO_WritePin>
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40020000 	.word	0x40020000

08000534 <SPI_FLASH_Init>:
    FLASH_CS_LOW();
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
    FLASH_CS_HIGH();
}

void SPI_FLASH_Init(void) { /* nada especial para W25Q */ }
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
	...

08000544 <SPI_FLASH_Read>:
        len -= chunk;
    }
}


void SPI_FLASH_Read(uint32_t addr, uint8_t* buf, uint32_t len) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
    uint8_t cmd[4] = {0x03, (addr>>16)&0xFF, (addr>>8)&0xFF, addr&0xFF};
 8000550:	2303      	movs	r3, #3
 8000552:	753b      	strb	r3, [r7, #20]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	0c1b      	lsrs	r3, r3, #16
 8000558:	b2db      	uxtb	r3, r3
 800055a:	757b      	strb	r3, [r7, #21]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	0a1b      	lsrs	r3, r3, #8
 8000560:	b2db      	uxtb	r3, r3
 8000562:	75bb      	strb	r3, [r7, #22]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	b2db      	uxtb	r3, r3
 8000568:	75fb      	strb	r3, [r7, #23]
    FLASH_CS_LOW();
 800056a:	f7ff ffcb 	bl	8000504 <FLASH_CS_LOW>
    HAL_SPI_Transmit(&hspi1, cmd, 4, HAL_MAX_DELAY);
 800056e:	f107 0114 	add.w	r1, r7, #20
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	2204      	movs	r2, #4
 8000578:	4808      	ldr	r0, [pc, #32]	@ (800059c <SPI_FLASH_Read+0x58>)
 800057a:	f002 f9f0 	bl	800295e <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, buf, len, HAL_MAX_DELAY);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	b29a      	uxth	r2, r3
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	68b9      	ldr	r1, [r7, #8]
 8000588:	4804      	ldr	r0, [pc, #16]	@ (800059c <SPI_FLASH_Read+0x58>)
 800058a:	f002 fb2c 	bl	8002be6 <HAL_SPI_Receive>
    FLASH_CS_HIGH();
 800058e:	f7ff ffc5 	bl	800051c <FLASH_CS_HIGH>
}
 8000592:	bf00      	nop
 8000594:	3718      	adds	r7, #24
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c

080005a0 <SPI_FLASH_WaitForReady>:

void SPI_FLASH_WaitForReady(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
    uint8_t cmd = 0x05, status;
 80005a6:	2305      	movs	r3, #5
 80005a8:	71fb      	strb	r3, [r7, #7]
    do {
        FLASH_CS_LOW();
 80005aa:	f7ff ffab 	bl	8000504 <FLASH_CS_LOW>
        HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 80005ae:	1df9      	adds	r1, r7, #7
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	2201      	movs	r2, #1
 80005b6:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <SPI_FLASH_WaitForReady+0x44>)
 80005b8:	f002 f9d1 	bl	800295e <HAL_SPI_Transmit>
        HAL_SPI_Receive(&hspi1, &status, 1, HAL_MAX_DELAY);
 80005bc:	1db9      	adds	r1, r7, #6
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	2201      	movs	r2, #1
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <SPI_FLASH_WaitForReady+0x44>)
 80005c6:	f002 fb0e 	bl	8002be6 <HAL_SPI_Receive>
        FLASH_CS_HIGH();
 80005ca:	f7ff ffa7 	bl	800051c <FLASH_CS_HIGH>
    } while (status & 0x01);
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1e8      	bne.n	80005aa <SPI_FLASH_WaitForReady+0xa>
}
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000007c 	.word	0x2000007c

080005e8 <ShowFramesFromFlash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ShowFramesFromFlash(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
    static uint8_t frameBuf[FRAME_SIZE];   // buffer estático

    uint32_t addr = FLASH_START;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
    uint32_t frame = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	603b      	str	r3, [r7, #0]

    while (1) {
    	SPI_FLASH_WaitForReady();          // esperar a que la flash esté lista
 80005f6:	f7ff ffd3 	bl	80005a0 <SPI_FLASH_WaitForReady>
        SPI_FLASH_Read(addr, frameBuf, FRAME_SIZE);
 80005fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005fe:	4913      	ldr	r1, [pc, #76]	@ (800064c <ShowFramesFromFlash+0x64>)
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff ff9f 	bl	8000544 <SPI_FLASH_Read>

        ssd1306_Fill(Black);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fa74 	bl	8000af4 <ssd1306_Fill>
        ssd1306_DrawBitmap(0, 0, frameBuf, FRAME_WIDTH, FRAME_HEIGHT, White);
 800060c:	2301      	movs	r3, #1
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	2340      	movs	r3, #64	@ 0x40
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	4a0d      	ldr	r2, [pc, #52]	@ (800064c <ShowFramesFromFlash+0x64>)
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f000 fafe 	bl	8000c1c <ssd1306_DrawBitmap>
        ssd1306_UpdateScreen();
 8000620:	f000 fa80 	bl	8000b24 <ssd1306_UpdateScreen>

        addr  += FRAME_SIZE;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800062a:	607b      	str	r3, [r7, #4]
        frame += 1;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	3301      	adds	r3, #1
 8000630:	603b      	str	r3, [r7, #0]

        if (frame >= TOTAL_FRAMES) {
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	f641 12ab 	movw	r2, #6571	@ 0x19ab
 8000638:	4293      	cmp	r3, r2
 800063a:	d903      	bls.n	8000644 <ShowFramesFromFlash+0x5c>
            addr  = FLASH_START;
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
            frame = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
        }

        HAL_Delay(FRAME_DELAY);
 8000644:	2021      	movs	r0, #33	@ 0x21
 8000646:	f000 fd67 	bl	8001118 <HAL_Delay>
    	SPI_FLASH_WaitForReady();          // esperar a que la flash esté lista
 800064a:	e7d4      	b.n	80005f6 <ShowFramesFromFlash+0xe>
 800064c:	2000011c 	.word	0x2000011c

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fcee 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f810 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f936 	bl	80008cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000660:	f000 f874 	bl	800074c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000664:	f000 f8a2 	bl	80007ac <MX_SPI1_Init>
  MX_TIM3_Init();
 8000668:	f000 f8d6 	bl	8000818 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar periféricos
  SPI_FLASH_Init();
 800066c:	f7ff ff62 	bl	8000534 <SPI_FLASH_Init>
  ssd1306_Init();
 8000670:	f000 f9d6 	bl	8000a20 <ssd1306_Init>

  // Mostrar frames
  ShowFramesFromFlash();
 8000674:	f7ff ffb8 	bl	80005e8 <ShowFramesFromFlash>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <main+0x28>

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fa42 	bl	8003b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <SystemClock_Config+0xc8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a26      	ldr	r2, [pc, #152]	@ (8000744 <SystemClock_Config+0xc8>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <SystemClock_Config+0xc8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <SystemClock_Config+0xcc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a20      	ldr	r2, [pc, #128]	@ (8000748 <SystemClock_Config+0xcc>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <SystemClock_Config+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006ec:	230c      	movs	r3, #12
 80006ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006f0:	2360      	movs	r3, #96	@ 0x60
 80006f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fc5f 	bl	8001fc4 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 f948 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800071c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	2103      	movs	r1, #3
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fec1 	bl	80024b4 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000738:	f000 f932 	bl	80009a0 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3750      	adds	r7, #80	@ 0x50
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_I2C1_Init+0x54>)
 8000752:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <MX_I2C1_Init+0x58>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x54>)
 8000758:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <MX_I2C1_Init+0x5c>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_I2C1_Init+0x54>)
 800075e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000762:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000764:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_I2C1_Init+0x54>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_I2C1_Init+0x54>)
 800076c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_I2C1_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_I2C1_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_I2C1_Init+0x54>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_I2C1_Init+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_I2C1_Init+0x54>)
 800078c:	f000 ff6c 	bl	8001668 <HAL_I2C_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000796:	f000 f903 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000028 	.word	0x20000028
 80007a4:	40005400 	.word	0x40005400
 80007a8:	00061a80 	.word	0x00061a80

080007ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007b2:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <MX_SPI1_Init+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007f6:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_SPI1_Init+0x64>)
 80007fe:	f002 f825 	bl	800284c <HAL_SPI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 f8ca 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000007c 	.word	0x2000007c
 8000814:	40013000 	.word	0x40013000

08000818 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800083a:	4b22      	ldr	r3, [pc, #136]	@ (80008c4 <MX_TIM3_Init+0xac>)
 800083c:	4a22      	ldr	r2, [pc, #136]	@ (80008c8 <MX_TIM3_Init+0xb0>)
 800083e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000840:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <MX_TIM3_Init+0xac>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <MX_TIM3_Init+0xac>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1606;
 800084c:	4b1d      	ldr	r3, [pc, #116]	@ (80008c4 <MX_TIM3_Init+0xac>)
 800084e:	f240 6246 	movw	r2, #1606	@ 0x646
 8000852:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	@ (80008c4 <MX_TIM3_Init+0xac>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085a:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <MX_TIM3_Init+0xac>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000860:	4818      	ldr	r0, [pc, #96]	@ (80008c4 <MX_TIM3_Init+0xac>)
 8000862:	f002 fdc5 	bl	80033f0 <HAL_TIM_PWM_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800086c:	f000 f898 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4619      	mov	r1, r3
 800087e:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <MX_TIM3_Init+0xac>)
 8000880:	f003 f8da 	bl	8003a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800088a:	f000 f889 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800088e:	2360      	movs	r3, #96	@ 0x60
 8000890:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2200      	movs	r2, #0
 80008a2:	4619      	mov	r1, r3
 80008a4:	4807      	ldr	r0, [pc, #28]	@ (80008c4 <MX_TIM3_Init+0xac>)
 80008a6:	f002 fdf3 	bl	8003490 <HAL_TIM_PWM_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80008b0:	f000 f876 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008b4:	4803      	ldr	r0, [pc, #12]	@ (80008c4 <MX_TIM3_Init+0xac>)
 80008b6:	f000 fb17 	bl	8000ee8 <HAL_TIM_MspPostInit>

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	@ 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000d4 	.word	0x200000d4
 80008c8:	40000400 	.word	0x40000400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	@ 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <MX_GPIO_Init+0xcc>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000998 <MX_GPIO_Init+0xcc>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f2:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <MX_GPIO_Init+0xcc>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b25      	ldr	r3, [pc, #148]	@ (8000998 <MX_GPIO_Init+0xcc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a24      	ldr	r2, [pc, #144]	@ (8000998 <MX_GPIO_Init+0xcc>)
 8000908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b22      	ldr	r3, [pc, #136]	@ (8000998 <MX_GPIO_Init+0xcc>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <MX_GPIO_Init+0xcc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a1d      	ldr	r2, [pc, #116]	@ (8000998 <MX_GPIO_Init+0xcc>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b1b      	ldr	r3, [pc, #108]	@ (8000998 <MX_GPIO_Init+0xcc>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_GPIO_Init+0xcc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a16      	ldr	r2, [pc, #88]	@ (8000998 <MX_GPIO_Init+0xcc>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_GPIO_Init+0xcc>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2110      	movs	r1, #16
 8000956:	4811      	ldr	r0, [pc, #68]	@ (800099c <MX_GPIO_Init+0xd0>)
 8000958:	f000 fe6c 	bl	8001634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800095c:	2304      	movs	r3, #4
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000964:	2301      	movs	r3, #1
 8000966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	480b      	ldr	r0, [pc, #44]	@ (800099c <MX_GPIO_Init+0xd0>)
 8000970:	f000 fcdc 	bl	800132c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000974:	2310      	movs	r3, #16
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_GPIO_Init+0xd0>)
 800098c:	f000 fcce 	bl	800132c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000990:	bf00      	nop
 8000992:	3728      	adds	r7, #40	@ 0x28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af04      	add	r7, sp, #16
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	9302      	str	r3, [sp, #8]
 80009cc:	2301      	movs	r3, #1
 80009ce:	9301      	str	r3, [sp, #4]
 80009d0:	1dfb      	adds	r3, r7, #7
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	2200      	movs	r2, #0
 80009d8:	2178      	movs	r1, #120	@ 0x78
 80009da:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <ssd1306_WriteCommand+0x2c>)
 80009dc:	f000 ff88 	bl	80018f0 <HAL_I2C_Mem_Write>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000028 	.word	0x20000028

080009ec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af04      	add	r7, sp, #16
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	f04f 32ff 	mov.w	r2, #4294967295
 80009fe:	9202      	str	r2, [sp, #8]
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2301      	movs	r3, #1
 8000a08:	2240      	movs	r2, #64	@ 0x40
 8000a0a:	2178      	movs	r1, #120	@ 0x78
 8000a0c:	4803      	ldr	r0, [pc, #12]	@ (8000a1c <ssd1306_WriteData+0x30>)
 8000a0e:	f000 ff6f 	bl	80018f0 <HAL_I2C_Mem_Write>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000028 	.word	0x20000028

08000a20 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000a24:	f7ff ffc2 	bl	80009ac <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000a28:	2064      	movs	r0, #100	@ 0x64
 8000a2a:	f000 fb75 	bl	8001118 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 f962 	bl	8000cf8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000a34:	2020      	movs	r0, #32
 8000a36:	f7ff ffc1 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff ffbe 	bl	80009bc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a40:	20b0      	movs	r0, #176	@ 0xb0
 8000a42:	f7ff ffbb 	bl	80009bc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000a46:	20c8      	movs	r0, #200	@ 0xc8
 8000a48:	f7ff ffb8 	bl	80009bc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f7ff ffb5 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000a52:	2010      	movs	r0, #16
 8000a54:	f7ff ffb2 	bl	80009bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000a58:	2040      	movs	r0, #64	@ 0x40
 8000a5a:	f7ff ffaf 	bl	80009bc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000a5e:	20ff      	movs	r0, #255	@ 0xff
 8000a60:	f000 f937 	bl	8000cd2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000a64:	20a1      	movs	r0, #161	@ 0xa1
 8000a66:	f7ff ffa9 	bl	80009bc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000a6a:	20a6      	movs	r0, #166	@ 0xa6
 8000a6c:	f7ff ffa6 	bl	80009bc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000a70:	20a8      	movs	r0, #168	@ 0xa8
 8000a72:	f7ff ffa3 	bl	80009bc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000a76:	203f      	movs	r0, #63	@ 0x3f
 8000a78:	f7ff ffa0 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a7c:	20a4      	movs	r0, #164	@ 0xa4
 8000a7e:	f7ff ff9d 	bl	80009bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000a82:	20d3      	movs	r0, #211	@ 0xd3
 8000a84:	f7ff ff9a 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff ff97 	bl	80009bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a8e:	20d5      	movs	r0, #213	@ 0xd5
 8000a90:	f7ff ff94 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000a94:	20f0      	movs	r0, #240	@ 0xf0
 8000a96:	f7ff ff91 	bl	80009bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000a9a:	20d9      	movs	r0, #217	@ 0xd9
 8000a9c:	f7ff ff8e 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000aa0:	2022      	movs	r0, #34	@ 0x22
 8000aa2:	f7ff ff8b 	bl	80009bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000aa6:	20da      	movs	r0, #218	@ 0xda
 8000aa8:	f7ff ff88 	bl	80009bc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000aac:	2012      	movs	r0, #18
 8000aae:	f7ff ff85 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000ab2:	20db      	movs	r0, #219	@ 0xdb
 8000ab4:	f7ff ff82 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000ab8:	2020      	movs	r0, #32
 8000aba:	f7ff ff7f 	bl	80009bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000abe:	208d      	movs	r0, #141	@ 0x8d
 8000ac0:	f7ff ff7c 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000ac4:	2014      	movs	r0, #20
 8000ac6:	f7ff ff79 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000aca:	2001      	movs	r0, #1
 8000acc:	f000 f914 	bl	8000cf8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 f80f 	bl	8000af4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000ad6:	f000 f825 	bl	8000b24 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000ada:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <ssd1306_Init+0xd0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <ssd1306_Init+0xd0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000ae6:	4b02      	ldr	r3, [pc, #8]	@ (8000af0 <ssd1306_Init+0xd0>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	711a      	strb	r2, [r3, #4]
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000091c 	.word	0x2000091c

08000af4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <ssd1306_Fill+0x14>
 8000b04:	2300      	movs	r3, #0
 8000b06:	e000      	b.n	8000b0a <ssd1306_Fill+0x16>
 8000b08:	23ff      	movs	r3, #255	@ 0xff
 8000b0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4803      	ldr	r0, [pc, #12]	@ (8000b20 <ssd1306_Fill+0x2c>)
 8000b12:	f002 ffff 	bl	8003b14 <memset>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000051c 	.word	0x2000051c

08000b24 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e016      	b.n	8000b5e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	3b50      	subs	r3, #80	@ 0x50
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff40 	bl	80009bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f7ff ff3d 	bl	80009bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000b42:	2010      	movs	r0, #16
 8000b44:	f7ff ff3a 	bl	80009bc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	01db      	lsls	r3, r3, #7
 8000b4c:	4a08      	ldr	r2, [pc, #32]	@ (8000b70 <ssd1306_UpdateScreen+0x4c>)
 8000b4e:	4413      	add	r3, r2
 8000b50:	2180      	movs	r1, #128	@ 0x80
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff4a 	bl	80009ec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	71fb      	strb	r3, [r7, #7]
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b07      	cmp	r3, #7
 8000b62:	d9e5      	bls.n	8000b30 <ssd1306_UpdateScreen+0xc>
    }
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000051c 	.word	0x2000051c

08000b74 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	71bb      	strb	r3, [r7, #6]
 8000b82:	4613      	mov	r3, r2
 8000b84:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db3d      	blt.n	8000c0a <ssd1306_DrawPixel+0x96>
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b92:	d83a      	bhi.n	8000c0a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000b94:	797b      	ldrb	r3, [r7, #5]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d11a      	bne.n	8000bd0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b9a:	79fa      	ldrb	r2, [r7, #7]
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	08db      	lsrs	r3, r3, #3
 8000ba0:	b2d8      	uxtb	r0, r3
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	01db      	lsls	r3, r3, #7
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c18 <ssd1306_DrawPixel+0xa4>)
 8000baa:	5cd3      	ldrb	r3, [r2, r3]
 8000bac:	b25a      	sxtb	r2, r3
 8000bae:	79bb      	ldrb	r3, [r7, #6]
 8000bb0:	f003 0307 	and.w	r3, r3, #7
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b259      	sxtb	r1, r3
 8000bc0:	79fa      	ldrb	r2, [r7, #7]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	01db      	lsls	r3, r3, #7
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b2c9      	uxtb	r1, r1
 8000bca:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <ssd1306_DrawPixel+0xa4>)
 8000bcc:	54d1      	strb	r1, [r2, r3]
 8000bce:	e01d      	b.n	8000c0c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000bd0:	79fa      	ldrb	r2, [r7, #7]
 8000bd2:	79bb      	ldrb	r3, [r7, #6]
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	b2d8      	uxtb	r0, r3
 8000bd8:	4603      	mov	r3, r0
 8000bda:	01db      	lsls	r3, r3, #7
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a0e      	ldr	r2, [pc, #56]	@ (8000c18 <ssd1306_DrawPixel+0xa4>)
 8000be0:	5cd3      	ldrb	r3, [r2, r3]
 8000be2:	b25a      	sxtb	r2, r3
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	2101      	movs	r1, #1
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	b259      	sxtb	r1, r3
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	01db      	lsls	r3, r3, #7
 8000c00:	4413      	add	r3, r2
 8000c02:	b2c9      	uxtb	r1, r1
 8000c04:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <ssd1306_DrawPixel+0xa4>)
 8000c06:	54d1      	strb	r1, [r2, r3]
 8000c08:	e000      	b.n	8000c0c <ssd1306_DrawPixel+0x98>
        return;
 8000c0a:	bf00      	nop
    }
}
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	2000051c 	.word	0x2000051c

08000c1c <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	603a      	str	r2, [r7, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	71bb      	strb	r3, [r7, #6]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000c32:	797b      	ldrb	r3, [r7, #5]
 8000c34:	3307      	adds	r3, #7
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da00      	bge.n	8000c3c <ssd1306_DrawBitmap+0x20>
 8000c3a:	3307      	adds	r3, #7
 8000c3c:	10db      	asrs	r3, r3, #3
 8000c3e:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db3e      	blt.n	8000cca <ssd1306_DrawBitmap+0xae>
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c50:	d83b      	bhi.n	8000cca <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	73bb      	strb	r3, [r7, #14]
 8000c56:	e033      	b.n	8000cc0 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000c58:	2300      	movs	r3, #0
 8000c5a:	737b      	strb	r3, [r7, #13]
 8000c5c:	e026      	b.n	8000cac <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000c5e:	7b7b      	ldrb	r3, [r7, #13]
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d003      	beq.n	8000c70 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e00d      	b.n	8000c8c <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000c70:	7bbb      	ldrb	r3, [r7, #14]
 8000c72:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000c76:	fb02 f303 	mul.w	r3, r2, r3
 8000c7a:	7b7a      	ldrb	r2, [r7, #13]
 8000c7c:	08d2      	lsrs	r2, r2, #3
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	4413      	add	r3, r2
 8000c82:	461a      	mov	r2, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	da08      	bge.n	8000ca6 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	7b7b      	ldrb	r3, [r7, #13]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	7f3a      	ldrb	r2, [r7, #28]
 8000c9e:	79b9      	ldrb	r1, [r7, #6]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff67 	bl	8000b74 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000ca6:	7b7b      	ldrb	r3, [r7, #13]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	737b      	strb	r3, [r7, #13]
 8000cac:	7b7a      	ldrb	r2, [r7, #13]
 8000cae:	797b      	ldrb	r3, [r7, #5]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d3d4      	bcc.n	8000c5e <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000cb4:	7bbb      	ldrb	r3, [r7, #14]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	73bb      	strb	r3, [r7, #14]
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	71bb      	strb	r3, [r7, #6]
 8000cc0:	7bba      	ldrb	r2, [r7, #14]
 8000cc2:	7e3b      	ldrb	r3, [r7, #24]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d3c7      	bcc.n	8000c58 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000cc8:	e000      	b.n	8000ccc <ssd1306_DrawBitmap+0xb0>
        return;
 8000cca:	bf00      	nop
}
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000cdc:	2381      	movs	r3, #129	@ 0x81
 8000cde:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fe6a 	bl	80009bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fe66 	bl	80009bc <ssd1306_WriteCommand>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d005      	beq.n	8000d14 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000d08:	23af      	movs	r3, #175	@ 0xaf
 8000d0a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <ssd1306_SetDisplayOn+0x38>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	715a      	strb	r2, [r3, #5]
 8000d12:	e004      	b.n	8000d1e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000d14:	23ae      	movs	r3, #174	@ 0xae
 8000d16:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <ssd1306_SetDisplayOn+0x38>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe4b 	bl	80009bc <ssd1306_WriteCommand>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000091c 	.word	0x2000091c

08000d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	4a0f      	ldr	r2, [pc, #60]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b09      	ldr	r3, [pc, #36]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_MspInit+0x4c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800

08000d84 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	@ 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a19      	ldr	r2, [pc, #100]	@ (8000e08 <HAL_I2C_MspInit+0x84>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d12b      	bne.n	8000dfe <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <HAL_I2C_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <HAL_I2C_MspInit+0x88>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <HAL_I2C_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc2:	23c0      	movs	r3, #192	@ 0xc0
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc6:	2312      	movs	r3, #18
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <HAL_I2C_MspInit+0x8c>)
 8000dde:	f000 faa5 	bl	800132c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <HAL_I2C_MspInit+0x88>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <HAL_I2C_MspInit+0x88>)
 8000dec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_I2C_MspInit+0x88>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40005400 	.word	0x40005400
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020400 	.word	0x40020400

08000e14 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a19      	ldr	r2, [pc, #100]	@ (8000e98 <HAL_SPI_MspInit+0x84>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12b      	bne.n	8000e8e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	4a17      	ldr	r2, [pc, #92]	@ (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e46:	4b15      	ldr	r3, [pc, #84]	@ (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b11      	ldr	r3, [pc, #68]	@ (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <HAL_SPI_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e6e:	23e0      	movs	r3, #224	@ 0xe0
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <HAL_SPI_MspInit+0x8c>)
 8000e8a:	f000 fa4f 	bl	800132c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	@ 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40013000 	.word	0x40013000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d10d      	bne.n	8000ed2 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_TIM_PWM_MspInit+0x40>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <HAL_TIM_PWM_MspInit+0x40>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <HAL_TIM_PWM_MspInit+0x40>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40000400 	.word	0x40000400
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <HAL_TIM_MspPostInit+0x68>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d11d      	bne.n	8000f46 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <HAL_TIM_MspPostInit+0x6c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a10      	ldr	r2, [pc, #64]	@ (8000f54 <HAL_TIM_MspPostInit+0x6c>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f54 <HAL_TIM_MspPostInit+0x6c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f26:	2310      	movs	r3, #16
 8000f28:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <HAL_TIM_MspPostInit+0x70>)
 8000f42:	f000 f9f3 	bl	800132c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40000400 	.word	0x40000400
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020400 	.word	0x40020400

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x4>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 f891 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe4:	f7ff ffea 	bl	8000fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100e:	f002 fd89 	bl	8003b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fb1d 	bl	8000650 <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001024:	08003bac 	.word	0x08003bac
  ldr r2, =_sbss
 8001028:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800102c:	20000928 	.word	0x20000928

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f931 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fe64 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f93b 	bl	8001312 <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f911 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	@ (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000924 	.word	0x20000924

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000924 	.word	0x20000924

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	@ (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	@ 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff47 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff5c 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffb0 	bl	8001280 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	@ 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	e159      	b.n	80015fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001348:	2201      	movs	r2, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	429a      	cmp	r2, r3
 8001362:	f040 8148 	bne.w	80015f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b01      	cmp	r3, #1
 8001370:	d005      	beq.n	800137e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137a:	2b02      	cmp	r3, #2
 800137c:	d130      	bne.n	80013e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	2203      	movs	r2, #3
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 0201 	and.w	r2, r3, #1
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d017      	beq.n	800141c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	2203      	movs	r2, #3
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d123      	bne.n	8001470 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	08da      	lsrs	r2, r3, #3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3208      	adds	r2, #8
 8001430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	220f      	movs	r2, #15
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3208      	adds	r2, #8
 800146a:	69b9      	ldr	r1, [r7, #24]
 800146c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0203 	and.w	r2, r3, #3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80a2 	beq.w	80015f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b57      	ldr	r3, [pc, #348]	@ (8001614 <HAL_GPIO_Init+0x2e8>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	4a56      	ldr	r2, [pc, #344]	@ (8001614 <HAL_GPIO_Init+0x2e8>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c2:	4b54      	ldr	r3, [pc, #336]	@ (8001614 <HAL_GPIO_Init+0x2e8>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ce:	4a52      	ldr	r2, [pc, #328]	@ (8001618 <HAL_GPIO_Init+0x2ec>)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a49      	ldr	r2, [pc, #292]	@ (800161c <HAL_GPIO_Init+0x2f0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d019      	beq.n	800152e <HAL_GPIO_Init+0x202>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a48      	ldr	r2, [pc, #288]	@ (8001620 <HAL_GPIO_Init+0x2f4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0x1fe>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a47      	ldr	r2, [pc, #284]	@ (8001624 <HAL_GPIO_Init+0x2f8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00d      	beq.n	8001526 <HAL_GPIO_Init+0x1fa>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a46      	ldr	r2, [pc, #280]	@ (8001628 <HAL_GPIO_Init+0x2fc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x1f6>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a45      	ldr	r2, [pc, #276]	@ (800162c <HAL_GPIO_Init+0x300>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_GPIO_Init+0x1f2>
 800151a:	2304      	movs	r3, #4
 800151c:	e008      	b.n	8001530 <HAL_GPIO_Init+0x204>
 800151e:	2307      	movs	r3, #7
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x204>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x204>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x204>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x204>
 800152e:	2300      	movs	r3, #0
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	f002 0203 	and.w	r2, r2, #3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001540:	4935      	ldr	r1, [pc, #212]	@ (8001618 <HAL_GPIO_Init+0x2ec>)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154e:	4b38      	ldr	r3, [pc, #224]	@ (8001630 <HAL_GPIO_Init+0x304>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001572:	4a2f      	ldr	r2, [pc, #188]	@ (8001630 <HAL_GPIO_Init+0x304>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001578:	4b2d      	ldr	r3, [pc, #180]	@ (8001630 <HAL_GPIO_Init+0x304>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800159c:	4a24      	ldr	r2, [pc, #144]	@ (8001630 <HAL_GPIO_Init+0x304>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a2:	4b23      	ldr	r3, [pc, #140]	@ (8001630 <HAL_GPIO_Init+0x304>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001630 <HAL_GPIO_Init+0x304>)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015cc:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <HAL_GPIO_Init+0x304>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001630 <HAL_GPIO_Init+0x304>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3301      	adds	r3, #1
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	f67f aea2 	bls.w	8001348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3724      	adds	r7, #36	@ 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	40013800 	.word	0x40013800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020400 	.word	0x40020400
 8001624:	40020800 	.word	0x40020800
 8001628:	40020c00 	.word	0x40020c00
 800162c:	40021000 	.word	0x40021000
 8001630:	40013c00 	.word	0x40013c00

08001634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001644:	787b      	ldrb	r3, [r7, #1]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001650:	e003      	b.n	800165a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001652:	887b      	ldrh	r3, [r7, #2]
 8001654:	041a      	lsls	r2, r3, #16
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	619a      	str	r2, [r3, #24]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e12b      	b.n	80018d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fb78 	bl	8000d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2224      	movs	r2, #36	@ 0x24
 8001698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016cc:	f001 f8aa 	bl	8002824 <HAL_RCC_GetPCLK1Freq>
 80016d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a81      	ldr	r2, [pc, #516]	@ (80018dc <HAL_I2C_Init+0x274>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d807      	bhi.n	80016ec <HAL_I2C_Init+0x84>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4a80      	ldr	r2, [pc, #512]	@ (80018e0 <HAL_I2C_Init+0x278>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	bf94      	ite	ls
 80016e4:	2301      	movls	r3, #1
 80016e6:	2300      	movhi	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	e006      	b.n	80016fa <HAL_I2C_Init+0x92>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a7d      	ldr	r2, [pc, #500]	@ (80018e4 <HAL_I2C_Init+0x27c>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	bf94      	ite	ls
 80016f4:	2301      	movls	r3, #1
 80016f6:	2300      	movhi	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0e7      	b.n	80018d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4a78      	ldr	r2, [pc, #480]	@ (80018e8 <HAL_I2C_Init+0x280>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	4a6a      	ldr	r2, [pc, #424]	@ (80018dc <HAL_I2C_Init+0x274>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d802      	bhi.n	800173c <HAL_I2C_Init+0xd4>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	3301      	adds	r3, #1
 800173a:	e009      	b.n	8001750 <HAL_I2C_Init+0xe8>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	4a69      	ldr	r2, [pc, #420]	@ (80018ec <HAL_I2C_Init+0x284>)
 8001748:	fba2 2303 	umull	r2, r3, r2, r3
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	3301      	adds	r3, #1
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	430b      	orrs	r3, r1
 8001756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001762:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	495c      	ldr	r1, [pc, #368]	@ (80018dc <HAL_I2C_Init+0x274>)
 800176c:	428b      	cmp	r3, r1
 800176e:	d819      	bhi.n	80017a4 <HAL_I2C_Init+0x13c>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	1e59      	subs	r1, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fbb1 f3f3 	udiv	r3, r1, r3
 800177e:	1c59      	adds	r1, r3, #1
 8001780:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001784:	400b      	ands	r3, r1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00a      	beq.n	80017a0 <HAL_I2C_Init+0x138>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1e59      	subs	r1, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fbb1 f3f3 	udiv	r3, r1, r3
 8001798:	3301      	adds	r3, #1
 800179a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179e:	e051      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017a0:	2304      	movs	r3, #4
 80017a2:	e04f      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d111      	bne.n	80017d0 <HAL_I2C_Init+0x168>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e58      	subs	r0, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6859      	ldr	r1, [r3, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80017be:	3301      	adds	r3, #1
 80017c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	e012      	b.n	80017f6 <HAL_I2C_Init+0x18e>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	1e58      	subs	r0, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	0099      	lsls	r1, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Init+0x196>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e022      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10e      	bne.n	8001824 <HAL_I2C_Init+0x1bc>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1e58      	subs	r0, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	460b      	mov	r3, r1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	440b      	add	r3, r1
 8001814:	fbb0 f3f3 	udiv	r3, r0, r3
 8001818:	3301      	adds	r3, #1
 800181a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001822:	e00f      	b.n	8001844 <HAL_I2C_Init+0x1dc>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	0099      	lsls	r1, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	fbb0 f3f3 	udiv	r3, r0, r3
 800183a:	3301      	adds	r3, #1
 800183c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001840:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	6809      	ldr	r1, [r1, #0]
 8001848:	4313      	orrs	r3, r2
 800184a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001872:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6911      	ldr	r1, [r2, #16]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68d2      	ldr	r2, [r2, #12]
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6812      	ldr	r2, [r2, #0]
 8001884:	430b      	orrs	r3, r1
 8001886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	000186a0 	.word	0x000186a0
 80018e0:	001e847f 	.word	0x001e847f
 80018e4:	003d08ff 	.word	0x003d08ff
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	10624dd3 	.word	0x10624dd3

080018f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	817b      	strh	r3, [r7, #10]
 8001902:	460b      	mov	r3, r1
 8001904:	813b      	strh	r3, [r7, #8]
 8001906:	4613      	mov	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800190a:	f7ff fbf9 	bl	8001100 <HAL_GetTick>
 800190e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b20      	cmp	r3, #32
 800191a:	f040 80d9 	bne.w	8001ad0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2319      	movs	r3, #25
 8001924:	2201      	movs	r2, #1
 8001926:	496d      	ldr	r1, [pc, #436]	@ (8001adc <HAL_I2C_Mem_Write+0x1ec>)
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f971 	bl	8001c10 <I2C_WaitOnFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
 8001936:	e0cc      	b.n	8001ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_I2C_Mem_Write+0x56>
 8001942:	2302      	movs	r3, #2
 8001944:	e0c5      	b.n	8001ad2 <HAL_I2C_Mem_Write+0x1e2>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d007      	beq.n	800196c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800197a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2221      	movs	r2, #33	@ 0x21
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2240      	movs	r2, #64	@ 0x40
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a3a      	ldr	r2, [r7, #32]
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800199c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae0 <HAL_I2C_Mem_Write+0x1f0>)
 80019ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019ae:	88f8      	ldrh	r0, [r7, #6]
 80019b0:	893a      	ldrh	r2, [r7, #8]
 80019b2:	8979      	ldrh	r1, [r7, #10]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	4603      	mov	r3, r0
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f890 	bl	8001ae4 <I2C_RequestMemoryWrite>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d052      	beq.n	8001a70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e081      	b.n	8001ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fa36 	bl	8001e44 <I2C_WaitOnTXEFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00d      	beq.n	80019fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d107      	bne.n	80019f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e06b      	b.n	8001ad2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	781a      	ldrb	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d11b      	bne.n	8001a70 <HAL_I2C_Mem_Write+0x180>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d017      	beq.n	8001a70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1aa      	bne.n	80019ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fa29 	bl	8001ed4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00d      	beq.n	8001aa4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d107      	bne.n	8001aa0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e016      	b.n	8001ad2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e000      	b.n	8001ad2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ad0:	2302      	movs	r3, #2
  }
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	00100002 	.word	0x00100002
 8001ae0:	ffff0000 	.word	0xffff0000

08001ae4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4603      	mov	r3, r0
 8001af4:	817b      	strh	r3, [r7, #10]
 8001af6:	460b      	mov	r3, r1
 8001af8:	813b      	strh	r3, [r7, #8]
 8001afa:	4613      	mov	r3, r2
 8001afc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f878 	bl	8001c10 <I2C_WaitOnFlagUntilTimeout>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00d      	beq.n	8001b42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b34:	d103      	bne.n	8001b3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e05f      	b.n	8001c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b42:	897b      	ldrh	r3, [r7, #10]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001b50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	6a3a      	ldr	r2, [r7, #32]
 8001b56:	492d      	ldr	r1, [pc, #180]	@ (8001c0c <I2C_RequestMemoryWrite+0x128>)
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 f8d3 	bl	8001d04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e04c      	b.n	8001c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b80:	6a39      	ldr	r1, [r7, #32]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f95e 	bl	8001e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d107      	bne.n	8001ba6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ba4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e02b      	b.n	8001c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bb0:	893b      	ldrh	r3, [r7, #8]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	611a      	str	r2, [r3, #16]
 8001bba:	e021      	b.n	8001c00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001bbc:	893b      	ldrh	r3, [r7, #8]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bcc:	6a39      	ldr	r1, [r7, #32]
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f938 	bl	8001e44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00d      	beq.n	8001bf6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d107      	bne.n	8001bf2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bf6:	893b      	ldrh	r3, [r7, #8]
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	00010002 	.word	0x00010002

08001c10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c20:	e048      	b.n	8001cb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d044      	beq.n	8001cb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c2a:	f7ff fa69 	bl	8001100 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d302      	bcc.n	8001c40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d139      	bne.n	8001cb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	0c1b      	lsrs	r3, r3, #16
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10d      	bne.n	8001c66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	43da      	mvns	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4013      	ands	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	e00c      	b.n	8001c80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4013      	ands	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d116      	bne.n	8001cb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	f043 0220 	orr.w	r2, r3, #32
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e023      	b.n	8001cfc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	0c1b      	lsrs	r3, r3, #16
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10d      	bne.n	8001cda <I2C_WaitOnFlagUntilTimeout+0xca>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	43da      	mvns	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf0c      	ite	eq
 8001cd0:	2301      	moveq	r3, #1
 8001cd2:	2300      	movne	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	e00c      	b.n	8001cf4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	43da      	mvns	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf0c      	ite	eq
 8001cec:	2301      	moveq	r3, #1
 8001cee:	2300      	movne	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d093      	beq.n	8001c22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d12:	e071      	b.n	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d22:	d123      	bne.n	8001d6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001d3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	f043 0204 	orr.w	r2, r3, #4
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e067      	b.n	8001e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d72:	d041      	beq.n	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d74:	f7ff f9c4 	bl	8001100 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d302      	bcc.n	8001d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d136      	bne.n	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d10c      	bne.n	8001dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	e00b      	b.n	8001dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	43da      	mvns	r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	4013      	ands	r3, r2
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf14      	ite	ne
 8001dc0:	2301      	movne	r3, #1
 8001dc2:	2300      	moveq	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d016      	beq.n	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f043 0220 	orr.w	r2, r3, #32
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e021      	b.n	8001e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d10c      	bne.n	8001e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bf14      	ite	ne
 8001e14:	2301      	movne	r3, #1
 8001e16:	2300      	moveq	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	e00b      	b.n	8001e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4013      	ands	r3, r2
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf14      	ite	ne
 8001e2e:	2301      	movne	r3, #1
 8001e30:	2300      	moveq	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f47f af6d 	bne.w	8001d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e50:	e034      	b.n	8001ebc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f886 	bl	8001f64 <I2C_IsAcknowledgeFailed>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e034      	b.n	8001ecc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d028      	beq.n	8001ebc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6a:	f7ff f949 	bl	8001100 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d302      	bcc.n	8001e80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d11d      	bne.n	8001ebc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8a:	2b80      	cmp	r3, #128	@ 0x80
 8001e8c:	d016      	beq.n	8001ebc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e007      	b.n	8001ecc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec6:	2b80      	cmp	r3, #128	@ 0x80
 8001ec8:	d1c3      	bne.n	8001e52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ee0:	e034      	b.n	8001f4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f83e 	bl	8001f64 <I2C_IsAcknowledgeFailed>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e034      	b.n	8001f5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d028      	beq.n	8001f4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efa:	f7ff f901 	bl	8001100 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d302      	bcc.n	8001f10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d11d      	bne.n	8001f4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d016      	beq.n	8001f4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	f043 0220 	orr.w	r2, r3, #32
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e007      	b.n	8001f5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d1c3      	bne.n	8001ee2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f7a:	d11b      	bne.n	8001fb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa0:	f043 0204 	orr.w	r2, r3, #4
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e267      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d075      	beq.n	80020ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fe2:	4b88      	ldr	r3, [pc, #544]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d00c      	beq.n	8002008 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fee:	4b85      	ldr	r3, [pc, #532]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d112      	bne.n	8002020 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffa:	4b82      	ldr	r3, [pc, #520]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002002:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002006:	d10b      	bne.n	8002020 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	4b7e      	ldr	r3, [pc, #504]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d05b      	beq.n	80020cc <HAL_RCC_OscConfig+0x108>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d157      	bne.n	80020cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e242      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0x74>
 800202a:	4b76      	ldr	r3, [pc, #472]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a75      	ldr	r2, [pc, #468]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e01d      	b.n	8002074 <HAL_RCC_OscConfig+0xb0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x98>
 8002042:	4b70      	ldr	r3, [pc, #448]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6f      	ldr	r2, [pc, #444]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b6d      	ldr	r3, [pc, #436]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a6c      	ldr	r2, [pc, #432]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e00b      	b.n	8002074 <HAL_RCC_OscConfig+0xb0>
 800205c:	4b69      	ldr	r3, [pc, #420]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a68      	ldr	r2, [pc, #416]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b66      	ldr	r3, [pc, #408]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a65      	ldr	r2, [pc, #404]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 800206e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff f840 	bl	8001100 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff f83c 	bl	8001100 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	@ 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e207      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002096:	4b5b      	ldr	r3, [pc, #364]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0xc0>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff f82c 	bl	8001100 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff f828 	bl	8001100 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e1f3      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020be:	4b51      	ldr	r3, [pc, #324]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0xe8>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d063      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020da:	4b4a      	ldr	r3, [pc, #296]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00b      	beq.n	80020fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d11c      	bne.n	800212c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020f2:	4b44      	ldr	r3, [pc, #272]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d116      	bne.n	800212c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	4b41      	ldr	r3, [pc, #260]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x152>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d001      	beq.n	8002116 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e1c7      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4937      	ldr	r1, [pc, #220]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	e03a      	b.n	80021a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d020      	beq.n	8002176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002134:	4b34      	ldr	r3, [pc, #208]	@ (8002208 <HAL_RCC_OscConfig+0x244>)
 8002136:	2201      	movs	r2, #1
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7fe ffe1 	bl	8001100 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002142:	f7fe ffdd 	bl	8001100 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e1a8      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002154:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002160:	4b28      	ldr	r3, [pc, #160]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4925      	ldr	r1, [pc, #148]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
 8002174:	e015      	b.n	80021a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002176:	4b24      	ldr	r3, [pc, #144]	@ (8002208 <HAL_RCC_OscConfig+0x244>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe ffc0 	bl	8001100 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002184:	f7fe ffbc 	bl	8001100 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e187      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002196:	4b1b      	ldr	r3, [pc, #108]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d036      	beq.n	800221c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d016      	beq.n	80021e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_RCC_OscConfig+0x248>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021bc:	f7fe ffa0 	bl	8001100 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c4:	f7fe ff9c 	bl	8001100 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e167      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_OscConfig+0x240>)
 80021d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x200>
 80021e2:	e01b      	b.n	800221c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e4:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_RCC_OscConfig+0x248>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ea:	f7fe ff89 	bl	8001100 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	e00e      	b.n	8002210 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f2:	f7fe ff85 	bl	8001100 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d907      	bls.n	8002210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e150      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
 8002204:	40023800 	.word	0x40023800
 8002208:	42470000 	.word	0x42470000
 800220c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002210:	4b88      	ldr	r3, [pc, #544]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ea      	bne.n	80021f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 8097 	beq.w	8002358 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222e:	4b81      	ldr	r3, [pc, #516]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10f      	bne.n	800225a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	4b7d      	ldr	r3, [pc, #500]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	4a7c      	ldr	r2, [pc, #496]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002248:	6413      	str	r3, [r2, #64]	@ 0x40
 800224a:	4b7a      	ldr	r3, [pc, #488]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002256:	2301      	movs	r3, #1
 8002258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225a:	4b77      	ldr	r3, [pc, #476]	@ (8002438 <HAL_RCC_OscConfig+0x474>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d118      	bne.n	8002298 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002266:	4b74      	ldr	r3, [pc, #464]	@ (8002438 <HAL_RCC_OscConfig+0x474>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a73      	ldr	r2, [pc, #460]	@ (8002438 <HAL_RCC_OscConfig+0x474>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002272:	f7fe ff45 	bl	8001100 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227a:	f7fe ff41 	bl	8001100 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e10c      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	4b6a      	ldr	r3, [pc, #424]	@ (8002438 <HAL_RCC_OscConfig+0x474>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x2ea>
 80022a0:	4b64      	ldr	r3, [pc, #400]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a4:	4a63      	ldr	r2, [pc, #396]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ac:	e01c      	b.n	80022e8 <HAL_RCC_OscConfig+0x324>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b05      	cmp	r3, #5
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x30c>
 80022b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ce:	e00b      	b.n	80022e8 <HAL_RCC_OscConfig+0x324>
 80022d0:	4b58      	ldr	r3, [pc, #352]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d4:	4a57      	ldr	r2, [pc, #348]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f023 0301 	bic.w	r3, r3, #1
 80022da:	6713      	str	r3, [r2, #112]	@ 0x70
 80022dc:	4b55      	ldr	r3, [pc, #340]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e0:	4a54      	ldr	r2, [pc, #336]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80022e2:	f023 0304 	bic.w	r3, r3, #4
 80022e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d015      	beq.n	800231c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7fe ff06 	bl	8001100 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f6:	e00a      	b.n	800230e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7fe ff02 	bl	8001100 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e0cb      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230e:	4b49      	ldr	r3, [pc, #292]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0ee      	beq.n	80022f8 <HAL_RCC_OscConfig+0x334>
 800231a:	e014      	b.n	8002346 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7fe fef0 	bl	8001100 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002322:	e00a      	b.n	800233a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002324:	f7fe feec 	bl	8001100 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e0b5      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233a:	4b3e      	ldr	r3, [pc, #248]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1ee      	bne.n	8002324 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d105      	bne.n	8002358 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234c:	4b39      	ldr	r3, [pc, #228]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	4a38      	ldr	r2, [pc, #224]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002352:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002356:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a1 	beq.w	80024a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002362:	4b34      	ldr	r3, [pc, #208]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b08      	cmp	r3, #8
 800236c:	d05c      	beq.n	8002428 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d141      	bne.n	80023fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	4b31      	ldr	r3, [pc, #196]	@ (800243c <HAL_RCC_OscConfig+0x478>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fec0 	bl	8001100 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe febc 	bl	8001100 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e087      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	4b27      	ldr	r3, [pc, #156]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69da      	ldr	r2, [r3, #28]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	019b      	lsls	r3, r3, #6
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	3b01      	subs	r3, #1
 80023bc:	041b      	lsls	r3, r3, #16
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	061b      	lsls	r3, r3, #24
 80023c6:	491b      	ldr	r1, [pc, #108]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023cc:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <HAL_RCC_OscConfig+0x478>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7fe fe95 	bl	8001100 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe fe91 	bl	8001100 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e05c      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x416>
 80023f8:	e054      	b.n	80024a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <HAL_RCC_OscConfig+0x478>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fe7e 	bl	8001100 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe fe7a 	bl	8001100 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e045      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_RCC_OscConfig+0x470>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x444>
 8002426:	e03d      	b.n	80024a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d107      	bne.n	8002440 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e038      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
 8002434:	40023800 	.word	0x40023800
 8002438:	40007000 	.word	0x40007000
 800243c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002440:	4b1b      	ldr	r3, [pc, #108]	@ (80024b0 <HAL_RCC_OscConfig+0x4ec>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d028      	beq.n	80024a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d121      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	429a      	cmp	r2, r3
 8002468:	d11a      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002470:	4013      	ands	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002478:	4293      	cmp	r3, r2
 800247a:	d111      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	3b01      	subs	r3, #1
 800248a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800248c:	429a      	cmp	r2, r3
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0cc      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b68      	ldr	r3, [pc, #416]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d90c      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b65      	ldr	r3, [pc, #404]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b8      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002508:	4b59      	ldr	r3, [pc, #356]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a58      	ldr	r2, [pc, #352]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002512:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002520:	4b53      	ldr	r3, [pc, #332]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800252a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b50      	ldr	r3, [pc, #320]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	494d      	ldr	r1, [pc, #308]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d044      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d119      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d003      	beq.n	8002572 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256e:	2b03      	cmp	r3, #3
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b3f      	ldr	r3, [pc, #252]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3b      	ldr	r3, [pc, #236]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e067      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b37      	ldr	r3, [pc, #220]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4934      	ldr	r1, [pc, #208]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7fe fdac 	bl	8001100 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7fe fda8 	bl	8001100 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e04f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b25      	ldr	r3, [pc, #148]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d20c      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4916      	ldr	r1, [pc, #88]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	490e      	ldr	r1, [pc, #56]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800263a:	f000 f821 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 800263e:	4602      	mov	r2, r0
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	490a      	ldr	r1, [pc, #40]	@ (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	5ccb      	ldrb	r3, [r1, r3]
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	4a09      	ldr	r2, [pc, #36]	@ (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd0c 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00
 8002670:	40023800 	.word	0x40023800
 8002674:	08003b84 	.word	0x08003b84
 8002678:	20000000 	.word	0x20000000
 800267c:	20000004 	.word	0x20000004

08002680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002684:	b090      	sub	sp, #64	@ 0x40
 8002686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002698:	4b59      	ldr	r3, [pc, #356]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d00d      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x40>
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	f200 80a1 	bhi.w	80027ec <HAL_RCC_GetSysClockFreq+0x16c>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x34>
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x3a>
 80026b2:	e09b      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b53      	ldr	r3, [pc, #332]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x184>)
 80026b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026b8:	e09b      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ba:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x188>)
 80026bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026be:	e098      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d028      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	2200      	movs	r2, #0
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026e8:	2100      	movs	r1, #0
 80026ea:	4b47      	ldr	r3, [pc, #284]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x188>)
 80026ec:	fb03 f201 	mul.w	r2, r3, r1
 80026f0:	2300      	movs	r3, #0
 80026f2:	fb00 f303 	mul.w	r3, r0, r3
 80026f6:	4413      	add	r3, r2
 80026f8:	4a43      	ldr	r2, [pc, #268]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x188>)
 80026fa:	fba0 1202 	umull	r1, r2, r0, r2
 80026fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002700:	460a      	mov	r2, r1
 8002702:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002706:	4413      	add	r3, r2
 8002708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800270a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800270c:	2200      	movs	r2, #0
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	61fa      	str	r2, [r7, #28]
 8002712:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002716:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800271a:	f7fd fd5d 	bl	80001d8 <__aeabi_uldivmod>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4613      	mov	r3, r2
 8002724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002726:	e053      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002728:	4b35      	ldr	r3, [pc, #212]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	2200      	movs	r2, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	617a      	str	r2, [r7, #20]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800273a:	f04f 0b00 	mov.w	fp, #0
 800273e:	4652      	mov	r2, sl
 8002740:	465b      	mov	r3, fp
 8002742:	f04f 0000 	mov.w	r0, #0
 8002746:	f04f 0100 	mov.w	r1, #0
 800274a:	0159      	lsls	r1, r3, #5
 800274c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002750:	0150      	lsls	r0, r2, #5
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	ebb2 080a 	subs.w	r8, r2, sl
 800275a:	eb63 090b 	sbc.w	r9, r3, fp
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800276a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800276e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002772:	ebb2 0408 	subs.w	r4, r2, r8
 8002776:	eb63 0509 	sbc.w	r5, r3, r9
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	00eb      	lsls	r3, r5, #3
 8002784:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002788:	00e2      	lsls	r2, r4, #3
 800278a:	4614      	mov	r4, r2
 800278c:	461d      	mov	r5, r3
 800278e:	eb14 030a 	adds.w	r3, r4, sl
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	eb45 030b 	adc.w	r3, r5, fp
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027a6:	4629      	mov	r1, r5
 80027a8:	028b      	lsls	r3, r1, #10
 80027aa:	4621      	mov	r1, r4
 80027ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b0:	4621      	mov	r1, r4
 80027b2:	028a      	lsls	r2, r1, #10
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ba:	2200      	movs	r2, #0
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	60fa      	str	r2, [r7, #12]
 80027c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027c4:	f7fd fd08 	bl	80001d8 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4613      	mov	r3, r2
 80027ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	3301      	adds	r3, #1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80027e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x184>)
 80027ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3740      	adds	r7, #64	@ 0x40
 80027f8:	46bd      	mov	sp, r7
 80027fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	00f42400 	.word	0x00f42400
 8002808:	017d7840 	.word	0x017d7840

0800280c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002810:	4b03      	ldr	r3, [pc, #12]	@ (8002820 <HAL_RCC_GetHCLKFreq+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000000 	.word	0x20000000

08002824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002828:	f7ff fff0 	bl	800280c <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0a9b      	lsrs	r3, r3, #10
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	@ (8002848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	08003b94 	.word	0x08003b94

0800284c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07b      	b.n	8002956 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	2b00      	cmp	r3, #0
 8002864:	d108      	bne.n	8002878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800286e:	d009      	beq.n	8002884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
 8002876:	e005      	b.n	8002884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fab8 	bl	8000e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80028cc:	431a      	orrs	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002908:	ea42 0103 	orr.w	r1, r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f003 0104 	and.w	r1, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	f003 0210 	and.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002944:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b088      	sub	sp, #32
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800296e:	f7fe fbc7 	bl	8001100 <HAL_GetTick>
 8002972:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d001      	beq.n	8002988 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	e12a      	b.n	8002bde <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_SPI_Transmit+0x36>
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e122      	b.n	8002bde <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <HAL_SPI_Transmit+0x48>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e11b      	b.n	8002bde <HAL_SPI_Transmit+0x280>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2203      	movs	r2, #3
 80029b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029f4:	d10f      	bne.n	8002a16 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a20:	2b40      	cmp	r3, #64	@ 0x40
 8002a22:	d007      	beq.n	8002a34 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a3c:	d152      	bne.n	8002ae4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_SPI_Transmit+0xee>
 8002a46:	8b7b      	ldrh	r3, [r7, #26]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d145      	bne.n	8002ad8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	881a      	ldrh	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	1c9a      	adds	r2, r3, #2
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a70:	e032      	b.n	8002ad8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d112      	bne.n	8002aa6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	881a      	ldrh	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	1c9a      	adds	r2, r3, #2
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002aa4:	e018      	b.n	8002ad8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aa6:	f7fe fb2b 	bl	8001100 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d803      	bhi.n	8002abe <HAL_SPI_Transmit+0x160>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d102      	bne.n	8002ac4 <HAL_SPI_Transmit+0x166>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e082      	b.n	8002bde <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1c7      	bne.n	8002a72 <HAL_SPI_Transmit+0x114>
 8002ae2:	e053      	b.n	8002b8c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <HAL_SPI_Transmit+0x194>
 8002aec:	8b7b      	ldrh	r3, [r7, #26]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d147      	bne.n	8002b82 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	330c      	adds	r3, #12
 8002afc:	7812      	ldrb	r2, [r2, #0]
 8002afe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b18:	e033      	b.n	8002b82 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d113      	bne.n	8002b50 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	330c      	adds	r3, #12
 8002b32:	7812      	ldrb	r2, [r2, #0]
 8002b34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002b4e:	e018      	b.n	8002b82 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b50:	f7fe fad6 	bl	8001100 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d803      	bhi.n	8002b68 <HAL_SPI_Transmit+0x20a>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d102      	bne.n	8002b6e <HAL_SPI_Transmit+0x210>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e02d      	b.n	8002bde <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1c6      	bne.n	8002b1a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b8c:	69fa      	ldr	r2, [r7, #28]
 8002b8e:	6839      	ldr	r1, [r7, #0]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fbd9 	bl	8003348 <SPI_EndRxTxTransaction>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b088      	sub	sp, #32
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d001      	beq.n	8002c06 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
 8002c04:	e104      	b.n	8002e10 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_SPI_Receive+0x2c>
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0fc      	b.n	8002e10 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c1e:	d112      	bne.n	8002c46 <HAL_SPI_Receive+0x60>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10e      	bne.n	8002c46 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f8eb 	bl	8002e18 <HAL_SPI_TransmitReceive>
 8002c42:	4603      	mov	r3, r0
 8002c44:	e0e4      	b.n	8002e10 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c46:	f7fe fa5b 	bl	8001100 <HAL_GetTick>
 8002c4a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_SPI_Receive+0x74>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0da      	b.n	8002e10 <HAL_SPI_Receive+0x22a>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2204      	movs	r2, #4
 8002c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	88fa      	ldrh	r2, [r7, #6]
 8002c7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca8:	d10f      	bne.n	8002cca <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd4:	2b40      	cmp	r3, #64	@ 0x40
 8002cd6:	d007      	beq.n	8002ce8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ce6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d170      	bne.n	8002dd2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cf0:	e035      	b.n	8002d5e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d115      	bne.n	8002d2c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f103 020c 	add.w	r2, r3, #12
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0c:	7812      	ldrb	r2, [r2, #0]
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d2a:	e018      	b.n	8002d5e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2c:	f7fe f9e8 	bl	8001100 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d803      	bhi.n	8002d44 <HAL_SPI_Receive+0x15e>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d42:	d102      	bne.n	8002d4a <HAL_SPI_Receive+0x164>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e058      	b.n	8002e10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1c4      	bne.n	8002cf2 <HAL_SPI_Receive+0x10c>
 8002d68:	e038      	b.n	8002ddc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d113      	bne.n	8002da0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d82:	b292      	uxth	r2, r2
 8002d84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8a:	1c9a      	adds	r2, r3, #2
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d9e:	e018      	b.n	8002dd2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da0:	f7fe f9ae 	bl	8001100 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d803      	bhi.n	8002db8 <HAL_SPI_Receive+0x1d2>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db6:	d102      	bne.n	8002dbe <HAL_SPI_Receive+0x1d8>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e01e      	b.n	8002e10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1c6      	bne.n	8002d6a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fa4b 	bl	800327c <SPI_EndRxTransaction>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
  }
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	@ 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e26:	2301      	movs	r3, #1
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e2a:	f7fe f969 	bl	8001100 <HAL_GetTick>
 8002e2e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e36:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d00c      	beq.n	8002e62 <HAL_SPI_TransmitReceive+0x4a>
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e4e:	d106      	bne.n	8002e5e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <HAL_SPI_TransmitReceive+0x46>
 8002e58:	7ffb      	ldrb	r3, [r7, #31]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d001      	beq.n	8002e62 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e17f      	b.n	8003162 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_SPI_TransmitReceive+0x5c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_SPI_TransmitReceive+0x5c>
 8002e6e:	887b      	ldrh	r3, [r7, #2]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e174      	b.n	8003162 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_SPI_TransmitReceive+0x6e>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e16d      	b.n	8003162 <HAL_SPI_TransmitReceive+0x34a>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d003      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	887a      	ldrh	r2, [r7, #2]
 8002eb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	887a      	ldrh	r2, [r7, #2]
 8002eca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee2:	2b40      	cmp	r3, #64	@ 0x40
 8002ee4:	d007      	beq.n	8002ef6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002efe:	d17e      	bne.n	8002ffe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_SPI_TransmitReceive+0xf6>
 8002f08:	8afb      	ldrh	r3, [r7, #22]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d16c      	bne.n	8002fe8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	1c9a      	adds	r2, r3, #2
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f32:	e059      	b.n	8002fe8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d11b      	bne.n	8002f7a <HAL_SPI_TransmitReceive+0x162>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d016      	beq.n	8002f7a <HAL_SPI_TransmitReceive+0x162>
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d113      	bne.n	8002f7a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	881a      	ldrh	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	1c9a      	adds	r2, r3, #2
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d119      	bne.n	8002fbc <HAL_SPI_TransmitReceive+0x1a4>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d014      	beq.n	8002fbc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f9c:	b292      	uxth	r2, r2
 8002f9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa4:	1c9a      	adds	r2, r3, #2
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fbc:	f7fe f8a0 	bl	8001100 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d80d      	bhi.n	8002fe8 <HAL_SPI_TransmitReceive+0x1d0>
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d009      	beq.n	8002fe8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0bc      	b.n	8003162 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1a0      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x11c>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d19b      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x11c>
 8002ffc:	e082      	b.n	8003104 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_SPI_TransmitReceive+0x1f4>
 8003006:	8afb      	ldrh	r3, [r7, #22]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d171      	bne.n	80030f0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	7812      	ldrb	r2, [r2, #0]
 8003018:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003032:	e05d      	b.n	80030f0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d11c      	bne.n	800307c <HAL_SPI_TransmitReceive+0x264>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d017      	beq.n	800307c <HAL_SPI_TransmitReceive+0x264>
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	2b01      	cmp	r3, #1
 8003050:	d114      	bne.n	800307c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	330c      	adds	r3, #12
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d119      	bne.n	80030be <HAL_SPI_TransmitReceive+0x2a6>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d014      	beq.n	80030be <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030ba:	2301      	movs	r3, #1
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030be:	f7fe f81f 	bl	8001100 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d803      	bhi.n	80030d6 <HAL_SPI_TransmitReceive+0x2be>
 80030ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d102      	bne.n	80030dc <HAL_SPI_TransmitReceive+0x2c4>
 80030d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e038      	b.n	8003162 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d19c      	bne.n	8003034 <HAL_SPI_TransmitReceive+0x21c>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d197      	bne.n	8003034 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003104:	6a3a      	ldr	r2, [r7, #32]
 8003106:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f91d 	bl	8003348 <SPI_EndRxTxTransaction>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e01d      	b.n	8003162 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10a      	bne.n	8003144 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800312e:	2300      	movs	r3, #0
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003160:	2300      	movs	r3, #0
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3728      	adds	r7, #40	@ 0x28
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800317c:	f7fd ffc0 	bl	8001100 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	4413      	add	r3, r2
 800318a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800318c:	f7fd ffb8 	bl	8001100 <HAL_GetTick>
 8003190:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003192:	4b39      	ldr	r3, [pc, #228]	@ (8003278 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	015b      	lsls	r3, r3, #5
 8003198:	0d1b      	lsrs	r3, r3, #20
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	fb02 f303 	mul.w	r3, r2, r3
 80031a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a2:	e055      	b.n	8003250 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d051      	beq.n	8003250 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031ac:	f7fd ffa8 	bl	8001100 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d902      	bls.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d13d      	bne.n	800323e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031da:	d111      	bne.n	8003200 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e4:	d004      	beq.n	80031f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ee:	d107      	bne.n	8003200 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003208:	d10f      	bne.n	800322a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e018      	b.n	8003270 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	e002      	b.n	8003250 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3b01      	subs	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	429a      	cmp	r2, r3
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	429a      	cmp	r2, r3
 800326c:	d19a      	bne.n	80031a4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000000 	.word	0x20000000

0800327c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003290:	d111      	bne.n	80032b6 <SPI_EndRxTransaction+0x3a>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800329a:	d004      	beq.n	80032a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a4:	d107      	bne.n	80032b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032be:	d12a      	bne.n	8003316 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c8:	d012      	beq.n	80032f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2200      	movs	r2, #0
 80032d2:	2180      	movs	r1, #128	@ 0x80
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff ff49 	bl	800316c <SPI_WaitFlagStateUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d02d      	beq.n	800333c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e026      	b.n	800333e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	2101      	movs	r1, #1
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7ff ff36 	bl	800316c <SPI_WaitFlagStateUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01a      	beq.n	800333c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330a:	f043 0220 	orr.w	r2, r3, #32
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e013      	b.n	800333e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2200      	movs	r2, #0
 800331e:	2101      	movs	r1, #1
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff ff23 	bl	800316c <SPI_WaitFlagStateUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e000      	b.n	800333e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2201      	movs	r2, #1
 800335c:	2102      	movs	r1, #2
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff ff04 	bl	800316c <SPI_WaitFlagStateUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e032      	b.n	80033e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800337a:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <SPI_EndRxTxTransaction+0xa0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1b      	ldr	r2, [pc, #108]	@ (80033ec <SPI_EndRxTxTransaction+0xa4>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	0d5b      	lsrs	r3, r3, #21
 8003386:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003398:	d112      	bne.n	80033c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2200      	movs	r2, #0
 80033a2:	2180      	movs	r1, #128	@ 0x80
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff fee1 	bl	800316c <SPI_WaitFlagStateUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d016      	beq.n	80033de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b4:	f043 0220 	orr.w	r2, r3, #32
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e00f      	b.n	80033e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	3b01      	subs	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d6:	2b80      	cmp	r3, #128	@ 0x80
 80033d8:	d0f2      	beq.n	80033c0 <SPI_EndRxTxTransaction+0x78>
 80033da:	e000      	b.n	80033de <SPI_EndRxTxTransaction+0x96>
        break;
 80033dc:	bf00      	nop
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20000000 	.word	0x20000000
 80033ec:	165e9f81 	.word	0x165e9f81

080033f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e041      	b.n	8003486 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd fd44 	bl	8000ea4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f000 f8f0 	bl	8003614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0ae      	b.n	800360c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	f200 809f 	bhi.w	80035fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034be:	a201      	add	r2, pc, #4	@ (adr r2, 80034c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	080035fd 	.word	0x080035fd
 80034cc:	080035fd 	.word	0x080035fd
 80034d0:	080035fd 	.word	0x080035fd
 80034d4:	08003539 	.word	0x08003539
 80034d8:	080035fd 	.word	0x080035fd
 80034dc:	080035fd 	.word	0x080035fd
 80034e0:	080035fd 	.word	0x080035fd
 80034e4:	0800357b 	.word	0x0800357b
 80034e8:	080035fd 	.word	0x080035fd
 80034ec:	080035fd 	.word	0x080035fd
 80034f0:	080035fd 	.word	0x080035fd
 80034f4:	080035bb 	.word	0x080035bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68b9      	ldr	r1, [r7, #8]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f90e 	bl	8003720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0208 	orr.w	r2, r2, #8
 8003512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0204 	bic.w	r2, r2, #4
 8003522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6999      	ldr	r1, [r3, #24]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	619a      	str	r2, [r3, #24]
      break;
 8003536:	e064      	b.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f954 	bl	80037ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6999      	ldr	r1, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	021a      	lsls	r2, r3, #8
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	619a      	str	r2, [r3, #24]
      break;
 8003578:	e043      	b.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f99f 	bl	80038c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0208 	orr.w	r2, r2, #8
 8003594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0204 	bic.w	r2, r2, #4
 80035a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69d9      	ldr	r1, [r3, #28]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	61da      	str	r2, [r3, #28]
      break;
 80035b8:	e023      	b.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f9e9 	bl	8003998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69d9      	ldr	r1, [r3, #28]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	021a      	lsls	r2, r3, #8
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	61da      	str	r2, [r3, #28]
      break;
 80035fa:	e002      	b.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003600:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800360a:	7dfb      	ldrb	r3, [r7, #23]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a37      	ldr	r2, [pc, #220]	@ (8003704 <TIM_Base_SetConfig+0xf0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00f      	beq.n	800364c <TIM_Base_SetConfig+0x38>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003632:	d00b      	beq.n	800364c <TIM_Base_SetConfig+0x38>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a34      	ldr	r2, [pc, #208]	@ (8003708 <TIM_Base_SetConfig+0xf4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_Base_SetConfig+0x38>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a33      	ldr	r2, [pc, #204]	@ (800370c <TIM_Base_SetConfig+0xf8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0x38>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a32      	ldr	r2, [pc, #200]	@ (8003710 <TIM_Base_SetConfig+0xfc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a28      	ldr	r2, [pc, #160]	@ (8003704 <TIM_Base_SetConfig+0xf0>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01b      	beq.n	800369e <TIM_Base_SetConfig+0x8a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800366c:	d017      	beq.n	800369e <TIM_Base_SetConfig+0x8a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a25      	ldr	r2, [pc, #148]	@ (8003708 <TIM_Base_SetConfig+0xf4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <TIM_Base_SetConfig+0x8a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a24      	ldr	r2, [pc, #144]	@ (800370c <TIM_Base_SetConfig+0xf8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00f      	beq.n	800369e <TIM_Base_SetConfig+0x8a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a23      	ldr	r2, [pc, #140]	@ (8003710 <TIM_Base_SetConfig+0xfc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00b      	beq.n	800369e <TIM_Base_SetConfig+0x8a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a22      	ldr	r2, [pc, #136]	@ (8003714 <TIM_Base_SetConfig+0x100>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <TIM_Base_SetConfig+0x8a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a21      	ldr	r2, [pc, #132]	@ (8003718 <TIM_Base_SetConfig+0x104>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d003      	beq.n	800369e <TIM_Base_SetConfig+0x8a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a20      	ldr	r2, [pc, #128]	@ (800371c <TIM_Base_SetConfig+0x108>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d108      	bne.n	80036b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003704 <TIM_Base_SetConfig+0xf0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d103      	bne.n	80036de <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f043 0204 	orr.w	r2, r3, #4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800

08003720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f023 0201 	bic.w	r2, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f023 0302 	bic.w	r3, r3, #2
 8003768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a1c      	ldr	r2, [pc, #112]	@ (80037e8 <TIM_OC1_SetConfig+0xc8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d10c      	bne.n	8003796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f023 0308 	bic.w	r3, r3, #8
 8003782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a13      	ldr	r2, [pc, #76]	@ (80037e8 <TIM_OC1_SetConfig+0xc8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d111      	bne.n	80037c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40010000 	.word	0x40010000

080037ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f023 0210 	bic.w	r2, r3, #16
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	021b      	lsls	r3, r3, #8
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f023 0320 	bic.w	r3, r3, #32
 8003836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a1e      	ldr	r2, [pc, #120]	@ (80038c0 <TIM_OC2_SetConfig+0xd4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10d      	bne.n	8003868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a15      	ldr	r2, [pc, #84]	@ (80038c0 <TIM_OC2_SetConfig+0xd4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d113      	bne.n	8003898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800387e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40010000 	.word	0x40010000

080038c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0303 	bic.w	r3, r3, #3
 80038fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800390c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a1d      	ldr	r2, [pc, #116]	@ (8003994 <TIM_OC3_SetConfig+0xd0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10d      	bne.n	800393e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800393c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <TIM_OC3_SetConfig+0xd0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d113      	bne.n	800396e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800394c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	621a      	str	r2, [r3, #32]
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40010000 	.word	0x40010000

08003998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	031b      	lsls	r3, r3, #12
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a10      	ldr	r2, [pc, #64]	@ (8003a34 <TIM_OC4_SetConfig+0x9c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d109      	bne.n	8003a0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	019b      	lsls	r3, r3, #6
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40010000 	.word	0x40010000

08003a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e050      	b.n	8003af2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d018      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9c:	d013      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a18      	ldr	r2, [pc, #96]	@ (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a16      	ldr	r2, [pc, #88]	@ (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d009      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a15      	ldr	r2, [pc, #84]	@ (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d004      	beq.n	8003ac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a13      	ldr	r2, [pc, #76]	@ (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40014000 	.word	0x40014000

08003b14 <memset>:
 8003b14:	4402      	add	r2, r0
 8003b16:	4603      	mov	r3, r0
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d100      	bne.n	8003b1e <memset+0xa>
 8003b1c:	4770      	bx	lr
 8003b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b22:	e7f9      	b.n	8003b18 <memset+0x4>

08003b24 <__libc_init_array>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	4d0d      	ldr	r5, [pc, #52]	@ (8003b5c <__libc_init_array+0x38>)
 8003b28:	4c0d      	ldr	r4, [pc, #52]	@ (8003b60 <__libc_init_array+0x3c>)
 8003b2a:	1b64      	subs	r4, r4, r5
 8003b2c:	10a4      	asrs	r4, r4, #2
 8003b2e:	2600      	movs	r6, #0
 8003b30:	42a6      	cmp	r6, r4
 8003b32:	d109      	bne.n	8003b48 <__libc_init_array+0x24>
 8003b34:	4d0b      	ldr	r5, [pc, #44]	@ (8003b64 <__libc_init_array+0x40>)
 8003b36:	4c0c      	ldr	r4, [pc, #48]	@ (8003b68 <__libc_init_array+0x44>)
 8003b38:	f000 f818 	bl	8003b6c <_init>
 8003b3c:	1b64      	subs	r4, r4, r5
 8003b3e:	10a4      	asrs	r4, r4, #2
 8003b40:	2600      	movs	r6, #0
 8003b42:	42a6      	cmp	r6, r4
 8003b44:	d105      	bne.n	8003b52 <__libc_init_array+0x2e>
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4c:	4798      	blx	r3
 8003b4e:	3601      	adds	r6, #1
 8003b50:	e7ee      	b.n	8003b30 <__libc_init_array+0xc>
 8003b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b56:	4798      	blx	r3
 8003b58:	3601      	adds	r6, #1
 8003b5a:	e7f2      	b.n	8003b42 <__libc_init_array+0x1e>
 8003b5c:	08003ba4 	.word	0x08003ba4
 8003b60:	08003ba4 	.word	0x08003ba4
 8003b64:	08003ba4 	.word	0x08003ba4
 8003b68:	08003ba8 	.word	0x08003ba8

08003b6c <_init>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	bf00      	nop
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr

08003b78 <_fini>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	bf00      	nop
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr
